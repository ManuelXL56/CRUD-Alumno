# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Config_Encrypt_pb2 as Config__Encrypt__pb2


class RouteGuideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetKeysAES = channel.unary_unary(
                '/grpc_encryption.RouteGuide/GetKeysAES',
                request_serializer=Config__Encrypt__pb2.Empty.SerializeToString,
                response_deserializer=Config__Encrypt__pb2.KeysAES.FromString,
                )
        self.EncryptionAES = channel.unary_unary(
                '/grpc_encryption.RouteGuide/EncryptionAES',
                request_serializer=Config__Encrypt__pb2.KeysAES_Data.SerializeToString,
                response_deserializer=Config__Encrypt__pb2.Data.FromString,
                )
        self.DecryptionAES = channel.unary_unary(
                '/grpc_encryption.RouteGuide/DecryptionAES',
                request_serializer=Config__Encrypt__pb2.KeysAES_Data.SerializeToString,
                response_deserializer=Config__Encrypt__pb2.Data.FromString,
                )


class RouteGuideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetKeysAES(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncryptionAES(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecryptionAES(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetKeysAES': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeysAES,
                    request_deserializer=Config__Encrypt__pb2.Empty.FromString,
                    response_serializer=Config__Encrypt__pb2.KeysAES.SerializeToString,
            ),
            'EncryptionAES': grpc.unary_unary_rpc_method_handler(
                    servicer.EncryptionAES,
                    request_deserializer=Config__Encrypt__pb2.KeysAES_Data.FromString,
                    response_serializer=Config__Encrypt__pb2.Data.SerializeToString,
            ),
            'DecryptionAES': grpc.unary_unary_rpc_method_handler(
                    servicer.DecryptionAES,
                    request_deserializer=Config__Encrypt__pb2.KeysAES_Data.FromString,
                    response_serializer=Config__Encrypt__pb2.Data.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_encryption.RouteGuide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouteGuide(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetKeysAES(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_encryption.RouteGuide/GetKeysAES',
            Config__Encrypt__pb2.Empty.SerializeToString,
            Config__Encrypt__pb2.KeysAES.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncryptionAES(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_encryption.RouteGuide/EncryptionAES',
            Config__Encrypt__pb2.KeysAES_Data.SerializeToString,
            Config__Encrypt__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecryptionAES(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_encryption.RouteGuide/DecryptionAES',
            Config__Encrypt__pb2.KeysAES_Data.SerializeToString,
            Config__Encrypt__pb2.Data.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
