// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: Config_Encryption.proto

package grpc_encryption

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{0}
}

type KeysAES struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data  string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KeysAES) Reset() {
	*x = KeysAES{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysAES) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysAES) ProtoMessage() {}

func (x *KeysAES) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysAES.ProtoReflect.Descriptor instead.
func (*KeysAES) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{1}
}

func (x *KeysAES) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeysAES) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *KeysAES) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KeysAES_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys *KeysAES `protobuf:"bytes,1,opt,name=keys,proto3" json:"keys,omitempty"`
	Data string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *KeysAES_Data) Reset() {
	*x = KeysAES_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysAES_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysAES_Data) ProtoMessage() {}

func (x *KeysAES_Data) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysAES_Data.ProtoReflect.Descriptor instead.
func (*KeysAES_Data) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{2}
}

func (x *KeysAES_Data) GetKeys() *KeysAES {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *KeysAES_Data) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type KeysRSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey string `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	PublicKey  string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *KeysRSA) Reset() {
	*x = KeysRSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysRSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysRSA) ProtoMessage() {}

func (x *KeysRSA) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysRSA.ProtoReflect.Descriptor instead.
func (*KeysRSA) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{4}
}

func (x *KeysRSA) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

func (x *KeysRSA) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type DataRSA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	Data      string `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataRSA) Reset() {
	*x = DataRSA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Config_Encryption_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRSA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRSA) ProtoMessage() {}

func (x *DataRSA) ProtoReflect() protoreflect.Message {
	mi := &file_Config_Encryption_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRSA.ProtoReflect.Descriptor instead.
func (*DataRSA) Descriptor() ([]byte, []int) {
	return file_Config_Encryption_proto_rawDescGZIP(), []int{5}
}

func (x *DataRSA) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *DataRSA) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_Config_Encryption_proto protoreflect.FileDescriptor

var file_Config_Encryption_proto_rawDesc = []byte{
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x45, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x45, 0x53, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x50, 0x0a, 0x0c, 0x4b, 0x65,
	0x79, 0x73, 0x41, 0x45, 0x53, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x41,
	0x45, 0x53, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1a, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x73,
	0x52, 0x53, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x3b, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x52, 0x53, 0x41, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xdd,
	0x04, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x40, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x53, 0x41, 0x12, 0x16, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x53, 0x41, 0x22, 0x00, 0x12,
	0x42, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x53, 0x41,
	0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x53, 0x41, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x53, 0x41, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x53, 0x41, 0x1a, 0x15,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x20, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x53, 0x41, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x46, 0x72,
	0x6f, 0x6d, 0x50, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x73, 0x52, 0x53, 0x41, 0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x53, 0x41, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x1f, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x53, 0x41, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x6d, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x53, 0x41, 0x1a, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x53, 0x41, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x45, 0x53, 0x12, 0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x45, 0x53, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x45, 0x53, 0x12, 0x1d, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x41, 0x45, 0x53, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x15, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x45, 0x53, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x41, 0x45, 0x53,
	0x5f, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x15, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x26,
	0x5a, 0x24, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4a, 0x57, 0x54,
	0x2d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Config_Encryption_proto_rawDescOnce sync.Once
	file_Config_Encryption_proto_rawDescData = file_Config_Encryption_proto_rawDesc
)

func file_Config_Encryption_proto_rawDescGZIP() []byte {
	file_Config_Encryption_proto_rawDescOnce.Do(func() {
		file_Config_Encryption_proto_rawDescData = protoimpl.X.CompressGZIP(file_Config_Encryption_proto_rawDescData)
	})
	return file_Config_Encryption_proto_rawDescData
}

var file_Config_Encryption_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_Config_Encryption_proto_goTypes = []interface{}{
	(*Empty)(nil),        // 0: grpc_encryption.Empty
	(*KeysAES)(nil),      // 1: grpc_encryption.KeysAES
	(*KeysAES_Data)(nil), // 2: grpc_encryption.KeysAES_Data
	(*Data)(nil),         // 3: grpc_encryption.Data
	(*KeysRSA)(nil),      // 4: grpc_encryption.KeysRSA
	(*DataRSA)(nil),      // 5: grpc_encryption.DataRSA
}
var file_Config_Encryption_proto_depIdxs = []int32{
	1, // 0: grpc_encryption.KeysAES_Data.keys:type_name -> grpc_encryption.KeysAES
	0, // 1: grpc_encryption.RouteGuide.GetKeysRSA:input_type -> grpc_encryption.Empty
	5, // 2: grpc_encryption.RouteGuide.EncryptionRSA:input_type -> grpc_encryption.DataRSA
	5, // 3: grpc_encryption.RouteGuide.DecryptionRSA:input_type -> grpc_encryption.DataRSA
	4, // 4: grpc_encryption.RouteGuide.DecodeRSAPrivateKeyFromPemString:input_type -> grpc_encryption.KeysRSA
	4, // 5: grpc_encryption.RouteGuide.DecodeRSAPublicKeyFromPemString:input_type -> grpc_encryption.KeysRSA
	0, // 6: grpc_encryption.RouteGuide.GetKeysAES:input_type -> grpc_encryption.Empty
	2, // 7: grpc_encryption.RouteGuide.EncryptionAES:input_type -> grpc_encryption.KeysAES_Data
	2, // 8: grpc_encryption.RouteGuide.DecryptionAES:input_type -> grpc_encryption.KeysAES_Data
	4, // 9: grpc_encryption.RouteGuide.GetKeysRSA:output_type -> grpc_encryption.KeysRSA
	3, // 10: grpc_encryption.RouteGuide.EncryptionRSA:output_type -> grpc_encryption.Data
	3, // 11: grpc_encryption.RouteGuide.DecryptionRSA:output_type -> grpc_encryption.Data
	4, // 12: grpc_encryption.RouteGuide.DecodeRSAPrivateKeyFromPemString:output_type -> grpc_encryption.KeysRSA
	4, // 13: grpc_encryption.RouteGuide.DecodeRSAPublicKeyFromPemString:output_type -> grpc_encryption.KeysRSA
	1, // 14: grpc_encryption.RouteGuide.GetKeysAES:output_type -> grpc_encryption.KeysAES
	3, // 15: grpc_encryption.RouteGuide.EncryptionAES:output_type -> grpc_encryption.Data
	3, // 16: grpc_encryption.RouteGuide.DecryptionAES:output_type -> grpc_encryption.Data
	9, // [9:17] is the sub-list for method output_type
	1, // [1:9] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_Config_Encryption_proto_init() }
func file_Config_Encryption_proto_init() {
	if File_Config_Encryption_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Config_Encryption_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Config_Encryption_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysAES); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Config_Encryption_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysAES_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Config_Encryption_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Config_Encryption_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysRSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Config_Encryption_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRSA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Config_Encryption_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_Config_Encryption_proto_goTypes,
		DependencyIndexes: file_Config_Encryption_proto_depIdxs,
		MessageInfos:      file_Config_Encryption_proto_msgTypes,
	}.Build()
	File_Config_Encryption_proto = out.File
	file_Config_Encryption_proto_rawDesc = nil
	file_Config_Encryption_proto_goTypes = nil
	file_Config_Encryption_proto_depIdxs = nil
}
