// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: Config.proto

package grpc_encryption

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	GetKeysRSA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeysRSA, error)
	EncryptionRSA(ctx context.Context, in *DataRSA, opts ...grpc.CallOption) (*Data, error)
	DecryptionRSA(ctx context.Context, in *DataRSA, opts ...grpc.CallOption) (*Data, error)
	DecodeRSAKeysFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error)
	DecodeRSAPrivateKeyFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error)
	DecodeRSAPublicKeyFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error)
	GetKeysAES(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeysAES, error)
	EncryptionAES(ctx context.Context, in *KeysAES_Data, opts ...grpc.CallOption) (*Data, error)
	DecryptionAES(ctx context.Context, in *KeysAES_Data, opts ...grpc.CallOption) (*Data, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GetKeysRSA(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeysRSA, error) {
	out := new(KeysRSA)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/GetKeysRSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) EncryptionRSA(ctx context.Context, in *DataRSA, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/EncryptionRSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DecryptionRSA(ctx context.Context, in *DataRSA, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/DecryptionRSA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DecodeRSAKeysFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error) {
	out := new(KeysRSA)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/DecodeRSAKeysFromPemString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DecodeRSAPrivateKeyFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error) {
	out := new(KeysRSA)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/DecodeRSAPrivateKeyFromPemString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DecodeRSAPublicKeyFromPemString(ctx context.Context, in *KeysRSA, opts ...grpc.CallOption) (*KeysRSA, error) {
	out := new(KeysRSA)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/DecodeRSAPublicKeyFromPemString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) GetKeysAES(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*KeysAES, error) {
	out := new(KeysAES)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/GetKeysAES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) EncryptionAES(ctx context.Context, in *KeysAES_Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/EncryptionAES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) DecryptionAES(ctx context.Context, in *KeysAES_Data, opts ...grpc.CallOption) (*Data, error) {
	out := new(Data)
	err := c.cc.Invoke(ctx, "/grpc_encryption.RouteGuide/DecryptionAES", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	GetKeysRSA(context.Context, *Empty) (*KeysRSA, error)
	EncryptionRSA(context.Context, *DataRSA) (*Data, error)
	DecryptionRSA(context.Context, *DataRSA) (*Data, error)
	DecodeRSAKeysFromPemString(context.Context, *KeysRSA) (*KeysRSA, error)
	DecodeRSAPrivateKeyFromPemString(context.Context, *KeysRSA) (*KeysRSA, error)
	DecodeRSAPublicKeyFromPemString(context.Context, *KeysRSA) (*KeysRSA, error)
	GetKeysAES(context.Context, *Empty) (*KeysAES, error)
	EncryptionAES(context.Context, *KeysAES_Data) (*Data, error)
	DecryptionAES(context.Context, *KeysAES_Data) (*Data, error)
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) GetKeysRSA(context.Context, *Empty) (*KeysRSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeysRSA not implemented")
}
func (UnimplementedRouteGuideServer) EncryptionRSA(context.Context, *DataRSA) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptionRSA not implemented")
}
func (UnimplementedRouteGuideServer) DecryptionRSA(context.Context, *DataRSA) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionRSA not implemented")
}
func (UnimplementedRouteGuideServer) DecodeRSAKeysFromPemString(context.Context, *KeysRSA) (*KeysRSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRSAKeysFromPemString not implemented")
}
func (UnimplementedRouteGuideServer) DecodeRSAPrivateKeyFromPemString(context.Context, *KeysRSA) (*KeysRSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRSAPrivateKeyFromPemString not implemented")
}
func (UnimplementedRouteGuideServer) DecodeRSAPublicKeyFromPemString(context.Context, *KeysRSA) (*KeysRSA, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeRSAPublicKeyFromPemString not implemented")
}
func (UnimplementedRouteGuideServer) GetKeysAES(context.Context, *Empty) (*KeysAES, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeysAES not implemented")
}
func (UnimplementedRouteGuideServer) EncryptionAES(context.Context, *KeysAES_Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptionAES not implemented")
}
func (UnimplementedRouteGuideServer) DecryptionAES(context.Context, *KeysAES_Data) (*Data, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptionAES not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_GetKeysRSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetKeysRSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/GetKeysRSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetKeysRSA(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_EncryptionRSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRSA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).EncryptionRSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/EncryptionRSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).EncryptionRSA(ctx, req.(*DataRSA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DecryptionRSA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRSA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DecryptionRSA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/DecryptionRSA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DecryptionRSA(ctx, req.(*DataRSA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DecodeRSAKeysFromPemString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRSA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DecodeRSAKeysFromPemString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/DecodeRSAKeysFromPemString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DecodeRSAKeysFromPemString(ctx, req.(*KeysRSA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DecodeRSAPrivateKeyFromPemString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRSA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DecodeRSAPrivateKeyFromPemString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/DecodeRSAPrivateKeyFromPemString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DecodeRSAPrivateKeyFromPemString(ctx, req.(*KeysRSA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DecodeRSAPublicKeyFromPemString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRSA)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DecodeRSAPublicKeyFromPemString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/DecodeRSAPublicKeyFromPemString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DecodeRSAPublicKeyFromPemString(ctx, req.(*KeysRSA))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_GetKeysAES_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetKeysAES(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/GetKeysAES",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetKeysAES(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_EncryptionAES_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysAES_Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).EncryptionAES(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/EncryptionAES",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).EncryptionAES(ctx, req.(*KeysAES_Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_DecryptionAES_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysAES_Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).DecryptionAES(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_encryption.RouteGuide/DecryptionAES",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).DecryptionAES(ctx, req.(*KeysAES_Data))
	}
	return interceptor(ctx, in, info, handler)
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_encryption.RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKeysRSA",
			Handler:    _RouteGuide_GetKeysRSA_Handler,
		},
		{
			MethodName: "EncryptionRSA",
			Handler:    _RouteGuide_EncryptionRSA_Handler,
		},
		{
			MethodName: "DecryptionRSA",
			Handler:    _RouteGuide_DecryptionRSA_Handler,
		},
		{
			MethodName: "DecodeRSAKeysFromPemString",
			Handler:    _RouteGuide_DecodeRSAKeysFromPemString_Handler,
		},
		{
			MethodName: "DecodeRSAPrivateKeyFromPemString",
			Handler:    _RouteGuide_DecodeRSAPrivateKeyFromPemString_Handler,
		},
		{
			MethodName: "DecodeRSAPublicKeyFromPemString",
			Handler:    _RouteGuide_DecodeRSAPublicKeyFromPemString_Handler,
		},
		{
			MethodName: "GetKeysAES",
			Handler:    _RouteGuide_GetKeysAES_Handler,
		},
		{
			MethodName: "EncryptionAES",
			Handler:    _RouteGuide_EncryptionAES_Handler,
		},
		{
			MethodName: "DecryptionAES",
			Handler:    _RouteGuide_DecryptionAES_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Config.proto",
}
