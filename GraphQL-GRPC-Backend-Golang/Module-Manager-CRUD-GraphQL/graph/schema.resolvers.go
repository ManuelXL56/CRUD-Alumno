package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"Module.com/GraphQL-Server/graph/generated"
	db "Module.com/GraphQL-Server/graph/grpc-db-users"
	encrypt "Module.com/GraphQL-Server/graph/grpc-encryption"
	"Module.com/GraphQL-Server/graph/model"
)

// SearchUser is the resolver for the registerUser field.
func (r *mutationResolver) SearchUser(ctx context.Context, input model.DataChiper) (*model.DataUser, error) {
	//We get keys rsa and decryption user data in format json
	KeysRSA, err := encrypt.GetKeysRSA(&encrypt.Empty{})
	if err != nil {
		return nil, err
	}
	Data, err := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.DataChiper})
	if err != nil {
		return nil, err
	}
	result, err := db.SearchUser(&db.Data{Data: Data})
	if err != nil {
		return nil, err
	}

	// Encryption results
	Matricule, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetMatricule()})
	FullName, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetFull_Name()})
	Mail, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetMail()})
	Direction, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetDirection()})
	Phone, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetPhone()})
	Role, _ := encrypt.EncryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: result.GetRole()})
	return &model.DataUser{
		Matricule: Matricule,
		FullName:  FullName,
		Mail:      Mail,
		Direction: Direction,
		Phone:     Phone,
		Role:      Role,
		PublicKey: KeysRSA.GetPublicKey(),
	}, nil
}

// RegisterUser is the resolver for the registerUser field.
func (r *mutationResolver) RegisterUser(ctx context.Context, input model.DataUserInput) (*model.Result, error) {
	// Decryption data
	Matricule, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Matricule})
	Password, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Password})
	Full_Name, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.FullName})
	Mail, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Mail})
	Direction, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Direction})
	Phone, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Phone})
	Role, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Role})

	_result, err := db.RegisterUser(&db.DataUser{Matricule: Matricule, Password: Password, Full_Name: Full_Name, Mail: Mail, Direction: Direction, Phone: Phone, Role: Role})
	if err != nil {
		return nil, err
	}
	return &model.Result{
		Result: _result,
	}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.DataUserUpdateInput) (*model.Result, error) {
	// Decryption data
	OldMatricule, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.OldMatricule})
	fmt.Println(OldMatricule)
	NewMatricule, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.NewMatricule})
	Password, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Password})
	Full_Name, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.FullName})
	Mail, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Mail})
	Direction, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Direction})
	Phone, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Phone})
	Role, _ := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.Role})

	_result, err := db.UpdateUser(&db.DataUser_Update{OldMatricule: OldMatricule, NewMatricule: NewMatricule, Password: Password, Full_Name: Full_Name, Mail: Mail, Direction: Direction, Phone: Phone, Role: Role})
	if err != nil {
		return nil, err
	}
	return &model.Result{
		Result: _result,
	}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.DataChiper) (*model.Result, error) {
	Data, err := encrypt.DecryptionRSA(&encrypt.DataRSA{PublicKey: input.PublicKey, Data: input.DataChiper})
	if err != nil {
		return nil, err
	}
	_result, err := db.DeleteUser(&db.Data{Data: Data})
	if err != nil {
		return nil, err
	}
	return &model.Result{
		Result: _result,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
